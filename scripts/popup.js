!function e(n,t,r){function i(o,u){if(!t[o]){if(!n[o]){var c="function"==typeof require&&require;if(!u&&c)return c(o,!0);if(a)return a(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var s=t[o]={exports:{}};n[o][0].call(s.exports,function(e){var t=n[o][1][e];return i(t?t:e)},s,s.exports,e,n,t,r)}return t[o].exports}for(var a="function"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}({1:[function(e,n,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_SETTINGS={skin:"default"}},{}],2:[function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();t.I18n=function(){function e(){r(this,e)}return i(e,null,[{key:"render",value:function(){var e=document.querySelectorAll('[data-translate="true"]');Array.prototype.forEach.call(e,function(e){var n=e.innerHTML,t=chrome.i18n.getMessage(n);t&&(e.innerHTML=chrome.i18n.getMessage(n))})}}]),e}()},{}],3:[function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),a=function(){function e(){r(this,e)}return i(e,[{key:"send",value:function(e,n,t,r){t?this.sendToContent(e,n,r):this.sendToBackground(e,n,r)}},{key:"sendToBackground",value:function(e,n,t){chrome.runtime.sendMessage({code:e,data:n},t)}},{key:"sendToContent",value:function(e,n,t){chrome.tabs.query({},function(r){r.forEach(function(r){chrome.tabs.sendMessage(r.id,{code:e,data:n},t)})})}},{key:"on",value:function(e,n){chrome.runtime.onMessage.addListener(function(t,r,i){t.code===e&&n(t.data,i)})}}]),e}();t.transport=new a},{}],4:[function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.chainUi=void 0;var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),a=e("../transport"),o=e("../helper/i18n"),u=e("../helper/default-settings"),c=function(){function e(){r(this,e),this.transport=a.transport,this.chain=[]}return i(e,[{key:"init",value:function(){o.I18n.render(),this.holder=document.getElementById("chain-holder"),this.placeholder='<div class="empty-query-placeholder">'+document.getElementById("if-empty-query").innerHTML+"</div>",this.reloadChain(),this.initSkin(),this.transport.on("update-adapter",this.reloadChain.bind(this))}},{key:"initSkin",value:function(){chrome.storage.sync.get(u.DEFAULT_SETTINGS,function(e){document.getElementsByTagName("html")[0].className+="skin-"+e.skin})}},{key:"renderChain",value:function(n){var t=this,r="";n.length?n.forEach(function(n){r+=e.renderAdapter(n)}):r=this.placeholder,this.holder.innerHTML=r,this.holder.querySelectorAll('[data-role="remove"]').forEach(function(e){var r=e.getAttribute("data-id"),i=n.find(function(e){return r===e.id});e.onclick=function(){a.transport.send("remove-adapter",i,!1,t.reloadChain.bind(t))}}),this.holder.querySelectorAll('[data-role="play"]').forEach(function(e){var r=e.getAttribute("data-id"),i=n.find(function(e){return r===e.id});e.onclick=function(){a.transport.send("add-adapter",i,!1,t.reloadChain.bind(t))}})}},{key:"reloadChain",value:function(){this.transport.send("get-chain",{},!1,this.renderChain.bind(this))}}],[{key:"renderAdapter",value:function(e){var n=document.getElementById("chain-template").innerHTML;return["label","id"].forEach(function(t){n=n.replace(new RegExp("{{"+t+"}}","g"),e[t])}),n}}]),e}();t.chainUi=new c},{"../helper/default-settings":1,"../helper/i18n":2,"../transport":3}],5:[function(e,n,t){"use strict";var r=e("./lib/ui/adapter-chain");r.chainUi.init()},{"./lib/ui/adapter-chain":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
